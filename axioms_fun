# basic concepts

Constant _is_Fun(X)
Notation _is_Fun   _ is_Fun    PRECEDENCE =
Axiom is_Fun_is_bool : (X is_Fun) is_bool
Axiom fun_not_bool : X is_Fun => !X is_bool
Axiom fun_not_null : X is_Fun => X != null
Axiom fun_not_set : X is_Fun => X !is_Set

Constant _apply(f,x)
Notation _apply   _ [ _ ]    OUTSIDE (
Axiom only_apply_fun : f is_Fun || f[X] = null
Axiom apply_sane_or_null : f[X] is_sane || f[X] = null

Constant fun(x : BODY(x))
Axiom fun_is_fun : fun(x : BODY(x)) is_Fun
Definition req_sane(X) := require X is_sane; X
Axiom def_apply_fun : fun(x : BODY(x))[A] = require A is_sane; req_sane(BODY(A))
Axiom fun_ext : forall(x : BODY1(x) = BODY2(x)) => fun(x : BODY1(x)) = fun(x : BODY2(x))
Axiom fun_repr : f is_Fun => fun(x : f[x]) = f

# definitions about functions

Definition funs := set(f : f is_Fun)   # the class of all sane functions
Definition domain(f) := require f is_Fun; set(x : f[x] != null)
Definition map_set(f,A) := require f is_Fun; map_set(x : f[x], A)
Definition image(f) := map_set(f, domain(f))
Definition fun_pair(A,B) := require A is_sane; require B is_sane; fun(x : require x = A; B)
Definition update(f,g) := require f is_Fun; require g is_Fun; fun(x : try g[x] else f[x])
Definition fun_on(A, x:BODY(x)) := require A is_Set; fun(x : require x in A; BODY(x))
Definition empty_fun := fun(x : null)

Definition _is_injective(f) := f is_Fun &&
  forall(x : require x in domain(f);
  forall(y : require y in domain(f);
    f[x] = f[y] => x = y
  ))
Notation _is_injective   _ is_injective   PRECEDENCE =
Definition inverse(f) := require f is_Fun; fun(y : unique(x : f[x] = y))

Axiom fun_sane : f is_Fun => (f is_sane <=> domain(f) is_sane)
Axiom fun_to_bool : f is_Fun => to_bool(f) = to_bool(domain(f))
